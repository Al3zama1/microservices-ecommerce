spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/order-service
    driver-class-name: org.postgresql.Driver
    username: test
    password: test
  jpa:
    hibernate:
      ddl-auto: update
  application:
    name: order-service
  zipkin:
    base-url: http://localhost:9411
  sleuth:
    sampler:
#     % of request received that should be sent to zipkin for tracing
      probability: 1.0
  kafka:
    bootstrap-servers: localhost:9092
    template:
      default-topic: notificationTopic
#   provide info to the spring boot project how to serialize the key and value paris
#   when sending to the kafka broker
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
#       for spring to know how to  map between these two classes that are coming from
#       two different fully qualified names
#       token value(random value -> event):fully qualified class name
        spring.json.type.mapping: event:com.example.orderservice.event.OrderPlacedEvent
server:
  error:
    include-message: always
  port: 8081

# actuator properties
management:
  health:
    circuitbreakers:
      enabled: true
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    tags:
      application: ${spring.application.name}
# resilience4j properties
resilience4j:
  circuitbreaker:
    instances:
      inventory:
        # be able to see the different states of the circuit breaker
        register-health-indicator: true
        # how much buffer size is going to take for the event
        event-consumer-buffer-size: 10
#        we will use a count-based circuit breaker type. In this type, the circuit will
#        trip or move to an open state based on each incoming request.
        sliding-window-type: count_based
#        we will use this parameter to record the last N requests to make the circuit breaker trip or open.
#        Here, we will record the last 5 requests.
        sliding-window-size: 5
#        it shows the percentage of the total sliding-window-size that fails and will cause the circuit breaker
#        trips to open state. This means, with a configuration of 40%, 2 out of 5 failed requests will cause
#        the circuit breaker trips to open state.
        failure-rate-threshold: 50
        # time to wait in open state before going to half open state
        wait-duration-in-open-state: 5s
        # numbers of requests to allow in half open state before resilience4j can
        # check if communication is good again
        # if requests are still failing after 3 requests, state goes back to open. Else to closed
        permitted-number-of-calls-in-half-open-state: 3
        # automatic transition between open and half open states
        automatic-transition-from-open-to-half-open-enabled: true
  timelimiter:
    instances:
      inventory:
#       wait a maximum if 3 seconds before terminating call and throwing timeout exception
        timeout-duration: 3s
  retry:
    instances:
      inventory:
#       resilience4j retry properties
        max-attempts: 3
#       wait time before retrying call
        wait-duration: 5s

clients:
  inventory-service:
    base-url: http://inventory-service

eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka:s3cret@localhost:8761/eureka