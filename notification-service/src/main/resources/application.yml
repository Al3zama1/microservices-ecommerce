spring:
  application:
    name: notification-service
  sleuth:
    integration:
      enabled: true
    sampler:
      probability: 1
  zipkin:
    base-url: http://localhost:9411/
  kafka:
    bootstrap-servers: localhost:9092
    template:
      default-topic: notificationTopic
    #   provide info to the spring boot project how to deserialize the key and value paris
    #   when receiving them from the kafka broker
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
#       for spring to know how to  map between these two classes that are coming from
#       two different fully qualified names
#       token should be the same as the one stated in the producer side of things (order service)
        spring.json.type.mapping: event:org.example.notificationserice.event.OrderPlacedEvent
      group-id: notificationId
eureka:
  instance:
    instance-id: ${spring.application.name}:${server.port}:${random.value}
  client:
    service-url:
      defaultZone: http://eureka:s3cret@localhost:8761/eureka

server:
  port: 0

#  actuator properties
management:
  # by default all the health endpoints are exposed by actuator -> actuator/health
  endpoints:
    web:
      exposure:
        #       also expose the prometheus actuator endpoint in actuator -> /actuator/prometheus
        include: prometheus
  metrics:
    tags:
      application: ${spring.application.name}